Index: src/test/SignupControllerTest.java
===================================================================
diff --git a/src/test/SignupControllerTest.java b/src/test/SignupControllerTest.java
deleted file mode 100644
--- a/src/test/SignupControllerTest.java	
+++ /dev/null	
@@ -1,143 +0,0 @@
-import com.example.petcarecab302qu.controller.SignupController;
-import com.example.petcarecab302qu.model.Contact;
-import com.example.petcarecab302qu.model.MockContactDAO;
-import javafx.application.Platform;
-import javafx.scene.control.PasswordField;
-import javafx.scene.control.TextField;
-import javafx.scene.text.Text;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import static org.junit.jupiter.api.Assertions.*;
-
-public class SignupControllerTest {
-
-    private SignupController signupController;
-    private MockContactDAO mockContactDAO;
-
-    @BeforeAll
-    public static void initToolkit() {
-        Platform.startup(() -> {}); // Initialize the JavaFX toolkit for testing
-    }
-
-
-    @BeforeEach
-    public void setUp() {
-        // Initialize the mock DAO and the signup controller
-        mockContactDAO = new MockContactDAO();
-        signupController = new SignupController();
-        signupController.setContactDAO(mockContactDAO);
-
-        // Initialize the fields using setter methods
-        signupController.setFirstNameField(new TextField());
-        signupController.setLastNameField(new TextField());
-        signupController.setEmailField(new TextField());
-        signupController.setPhoneField(new TextField());
-        signupController.setPasswordField(new PasswordField()); // Updated to PasswordField
-        signupController.setErrorMessage(new Text());
-    }
-
-    @Test
-    public void testValidSignUp() {
-        // Set valid sign-up data using getter methods
-        signupController.getFirstNameField().setText("John");
-        signupController.getLastNameField().setText("Doe");
-        signupController.getEmailField().setText("johndoe@example.com");
-        signupController.getPhoneField().setText("0423423423");
-        signupController.getPasswordField().setText("password123");
-
-        // Execute sign-up action
-        signupController.handleSignUpAction();
-
-        // Verify that the contact was added correctly
-        Contact addedContact = mockContactDAO.getAllContacts().get(0);
-        assertEquals("John", addedContact.getFirstName());
-        assertEquals("Doe", addedContact.getLastName());
-        assertEquals("johndoe@example.com", addedContact.getEmail());
-        assertEquals("0423423423", addedContact.getPhone());
-        assertEquals("password123", addedContact.getPassword());
-
-        // Verify success message
-        assertEquals("Sign-Up Successful!", signupController.getErrorMessage().getText());
-    }
-
-    @Test
-    public void testMissingFieldsSignUp() {
-        // Leave the lastNameField empty using setter methods
-        signupController.getFirstNameField().setText("John");
-        signupController.getLastNameField().setText("");
-        signupController.getEmailField().setText("johndoe@example.com");
-        signupController.getPhoneField().setText("0423423423");
-        signupController.getPasswordField().setText("password123");
-
-        // Execute sign-up action
-        signupController.handleSignUpAction();
-
-        // Ensure no contact was added
-        assertTrue(mockContactDAO.getAllContacts().isEmpty());
-
-        // Verify error message
-        assertEquals("All fields are required!", signupController.getErrorMessage().getText());
-    }
-
-    @Test
-    public void testEmailAlreadyExists() {
-        // Add an existing contact with the same email
-        mockContactDAO.addContact(new Contact("Jane", "Doe", "johndoe@example.com", "0423423424", "password"));
-
-        // Set up sign-up data with the same email
-        signupController.getFirstNameField().setText("John");
-        signupController.getLastNameField().setText("Doe");
-        signupController.getEmailField().setText("johndoe@example.com");
-        signupController.getPhoneField().setText("0423423423");
-        signupController.getPasswordField().setText("password123");
-
-        // Execute sign-up action
-        signupController.handleSignUpAction();
-
-        // Ensure no additional contact was added
-        assertEquals(1, mockContactDAO.getAllContacts().size());
-
-        // Verify error message for duplicate email
-        assertEquals("Email already exists. Please use a different email.", signupController.getErrorMessage().getText());
-    }
-
-    @Test
-    public void testWeakPasswordSignUp() {
-        // Set up sign-up data with a weak password
-        signupController.getFirstNameField().setText("John");
-        signupController.getLastNameField().setText("Doe");
-        signupController.getEmailField().setText("johndoe@example.com");
-        signupController.getPhoneField().setText("0423423423");
-        signupController.getPasswordField().setText("123");  // Weak password
-
-        // Execute sign-up action
-        signupController.handleSignUpAction();
-
-        // Ensure no contact was added
-        assertTrue(mockContactDAO.getAllContacts().isEmpty());
-
-        // Verify error message for weak password
-        assertEquals("Password must be at least 8 characters long and contain both letters and numbers.", signupController.getErrorMessage().getText());
-    }
-
-    @Test
-    public void testInvalidEmailFormatSignUp() {
-        // Set up sign-up data with an invalid email format
-        signupController.getFirstNameField().setText("John");
-        signupController.getLastNameField().setText("Doe");
-        signupController.getEmailField().setText("invalid-email");  // Invalid email
-        signupController.getPhoneField().setText("0423423423");
-        signupController.getPasswordField().setText("password123");
-
-        // Execute sign-up action
-        signupController.handleSignUpAction();
-
-        // Ensure no contact was added
-        assertTrue(mockContactDAO.getAllContacts().isEmpty());
-
-        // Verify error message for invalid email format
-        assertEquals("Please enter a valid email address.", signupController.getErrorMessage().getText());
-    }
-}
Index: .idea/workspace.xml
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
deleted file mode 100644
--- a/.idea/workspace.xml	
+++ /dev/null	
@@ -1,175 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="AnalysisUIOptions">
-    <option name="ANALYZE_TEST_SOURCES" value="false" />
-  </component>
-  <component name="AutoImportSettings">
-    <option name="autoReloadType" value="SELECTIVE" />
-  </component>
-  <component name="ChangeListManager">
-    <list default="true" id="1c7ebeef-307b-4e1c-b72d-ed10fc68e456" name="Changes" comment="Login #5" />
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="FileTemplateManagerImpl">
-    <option name="RECENT_TEMPLATES">
-      <list>
-        <option value="Interface" />
-        <option value="FxmlFile" />
-        <option value="Class" />
-      </list>
-    </option>
-  </component>
-  <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="main" />
-      </map>
-    </option>
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-  </component>
-  <component name="GitHubPullRequestSearchHistory">{
-  &quot;lastFilter&quot;: {
-    &quot;state&quot;: &quot;OPEN&quot;,
-    &quot;assignee&quot;: &quot;3bap&quot;
-  }
-}</component>
-  <component name="GithubPullRequestsUISettings">{
-  &quot;selectedUrlAndAccountId&quot;: {
-    &quot;url&quot;: &quot;https://github.com/notajet/PETCARE-CAB302-QU.git&quot;,
-    &quot;accountId&quot;: &quot;2ed71337-4d93-43d8-ba6f-8465b1d14575&quot;
-  }
-}</component>
-  <component name="MavenImportPreferences">
-    <option name="generalSettings">
-      <MavenGeneralSettings>
-        <option name="mavenHomeTypeForPersistence" value="WRAPPER" />
-      </MavenGeneralSettings>
-    </option>
-  </component>
-  <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 3
-}</component>
-  <component name="ProjectId" id="2l90Ho6Zvs41dCIIDjuKyU4gcGw" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
-  <component name="ProjectViewState">
-    <option name="hideEmptyMiddlePackages" value="true" />
-    <option name="showLibraryContents" value="true" />
-  </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.HelloApplication.executor": "Run",
-    "Downloaded.Files.Path.Enabled": "false",
-    "JUnit.SignupControllerTest.executor": "Run",
-    "Repository.Attach.Annotations": "false",
-    "Repository.Attach.JavaDocs": "false",
-    "Repository.Attach.Sources": "false",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "Taj",
-    "kotlin-language-version-configured": "true",
-    "project.structure.last.edited": "Project",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2",
-    "settings.editor.selected.configurable": "preferences.pluginManager"
-  }
-}]]></component>
-  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
-  <component name="TaskManager">
-    <task active="true" id="Default" summary="Default task">
-      <changelist id="1c7ebeef-307b-4e1c-b72d-ed10fc68e456" name="Changes" comment="" />
-      <created>1724576901892</created>
-      <option name="number" value="Default" />
-      <option name="presentableId" value="Default" />
-      <updated>1724576901892</updated>
-    </task>
-    <task id="LOCAL-00001" summary="Initial SetUP #2">
-      <option name="closed" value="true" />
-      <created>1725321028104</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1725321028104</updated>
-    </task>
-    <task id="LOCAL-00002" summary="Initial SetUP #2">
-      <option name="closed" value="true" />
-      <created>1725443057376</created>
-      <option name="number" value="00002" />
-      <option name="presentableId" value="LOCAL-00002" />
-      <option name="project" value="LOCAL" />
-      <updated>1725443057376</updated>
-    </task>
-    <task id="LOCAL-00003" summary="Login #4">
-      <option name="closed" value="true" />
-      <created>1725448907327</created>
-      <option name="number" value="00003" />
-      <option name="presentableId" value="LOCAL-00003" />
-      <option name="project" value="LOCAL" />
-      <updated>1725448907327</updated>
-    </task>
-    <task id="LOCAL-00004" summary="Login #5">
-      <option name="closed" value="true" />
-      <created>1725449607542</created>
-      <option name="number" value="00004" />
-      <option name="presentableId" value="LOCAL-00004" />
-      <option name="project" value="LOCAL" />
-      <updated>1725449607542</updated>
-    </task>
-    <task id="LOCAL-00005" summary="Login #11">
-      <option name="closed" value="true" />
-      <created>1725785146933</created>
-      <option name="number" value="00005" />
-      <option name="presentableId" value="LOCAL-00005" />
-      <option name="project" value="LOCAL" />
-      <updated>1725785146933</updated>
-    </task>
-    <task id="LOCAL-00006" summary="Login #13">
-      <option name="closed" value="true" />
-      <created>1725926014205</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1725926014205</updated>
-    </task>
-    <task id="LOCAL-00007" summary="Login #13 Java Doc">
-      <option name="closed" value="true" />
-      <created>1725926284400</created>
-      <option name="number" value="00007" />
-      <option name="presentableId" value="LOCAL-00007" />
-      <option name="project" value="LOCAL" />
-      <updated>1725926284400</updated>
-    </task>
-    <task id="LOCAL-00008" summary="Login #13 Java Doc">
-      <option name="closed" value="true" />
-      <created>1725927701304</created>
-      <option name="number" value="00008" />
-      <option name="presentableId" value="LOCAL-00008" />
-      <option name="project" value="LOCAL" />
-      <updated>1725927701304</updated>
-    </task>
-    <option name="localTasksCounter" value="9" />
-    <servers />
-  </component>
-  <component name="Vcs.Log.Tabs.Properties">
-    <option name="TAB_STATES">
-      <map>
-        <entry key="MAIN">
-          <value>
-            <State />
-          </value>
-        </entry>
-      </map>
-    </option>
-  </component>
-  <component name="VcsManagerConfiguration">
-    <MESSAGE value="Initial SetUP #2" />
-    <MESSAGE value="Login #4" />
-    <MESSAGE value="Login #5" />
-    <MESSAGE value="Login #11" />
-    <MESSAGE value="Login #13" />
-    <MESSAGE value="Login #13 Java Doc" />
-    <option name="LAST_COMMIT_MESSAGE" value="Login #13 Java Doc" />
-  </component>
-</project>
\ No newline at end of file
Index: src/main/java/com/example/petcarecab302qu/controller/PetprofileController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/petcarecab302qu/controller/PetprofileController.java b/src/main/java/com/example/petcarecab302qu/controller/PetprofileController.java
deleted file mode 100644
--- a/src/main/java/com/example/petcarecab302qu/controller/PetprofileController.java	
+++ /dev/null	
@@ -1,120 +0,0 @@
-package com.example.petcarecab302qu.controller;
-
-import com.example.petcarecab302qu.HelloApplication;
-import com.example.petcarecab302qu.model.SqliteConnectionPetCare;
-import javafx.event.ActionEvent;
-import javafx.fxml.FXML;
-import javafx.fxml.FXMLLoader;
-import javafx.scene.Scene;
-import javafx.scene.control.Button;
-import javafx.scene.control.TextField;
-import com.example.petcarecab302qu.db.SqlitePetDAO;
-import com.example.petcarecab302qu.model.Pet;
-import javafx.stage.Stage;
-
-import java.io.IOException;
-
-public class PetprofileController {
-
-    @FXML
-    private TextField nameField;
-
-    @FXML
-    private TextField ageField;
-
-    @FXML
-    private TextField genderField;
-
-    @FXML
-    private TextField breedField;
-
-    @FXML
-    private TextField weightField;
-
-    @FXML
-    private TextField heightField;
-
-    @FXML
-    private TextField imageUrlField;
-
-    @FXML
-    private Button saveButton;
-
-    private SqlitePetDAO petDAO;
-
-    // Initialize the controller (assuming the petDAO is initialized properly)
-    @FXML
-    public void initialize() {
-        petDAO = new SqlitePetDAO(SqliteConnectionPetCare.getInstance());
-    }
-
-    @FXML
-    private void savePet() {
-        // Get the input from the fields
-        String name = nameField.getText();
-        String ageText = ageField.getText();
-        String gender = genderField.getText();
-        String breed = breedField.getText();
-        String weightText = weightField.getText();
-        String heightText = heightField.getText();
-        String imageUrl = imageUrlField.getText();
-
-        // Validate and parse the inputs, set default values if empty
-        int age = 0;
-        if (!ageText.trim().isEmpty()) {
-            try {
-                age = Integer.parseInt(ageText);
-            } catch (NumberFormatException e) {
-                System.out.println("Invalid input for age: " + ageText);
-                return;  // Exit method if invalid input
-            }
-        }
-
-        double weight = 0.0;
-        if (!weightText.trim().isEmpty()) {
-            try {
-                weight = Double.parseDouble(weightText);
-            } catch (NumberFormatException e) {
-                System.out.println("Invalid input for weight: " + weightText);
-                return;  // Exit method if invalid input
-            }
-        }
-
-        double height = 0.0;
-        if (!heightText.trim().isEmpty()) {
-            try {
-                height = Double.parseDouble(heightText);
-            } catch (NumberFormatException e) {
-                System.out.println("Invalid input for height: " + heightText);
-                return;  // Exit method if invalid input
-            }
-        }
-
-        // Now create the new Pet object
-        Pet newPet = new Pet(0, name, age, gender, breed, weight, height, imageUrl);
-
-        // Save the pet to the database
-        petDAO.addPet(newPet);
-
-        // Clear the form after saving
-        clearForm();
-    }
-
-    private void clearForm() {
-        nameField.clear();
-        ageField.clear();
-        genderField.clear();
-        breedField.clear();
-        weightField.clear();
-        heightField.clear();
-        imageUrlField.clear();
-    }
-
-    @FXML
-    public void handleBackButton(ActionEvent event) throws IOException {
-        Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();
-        FXMLLoader loader = new FXMLLoader(HelloApplication.class.getResource("home-view.fxml"));
-        Scene scene = new Scene(loader.load(), HelloApplication.WIDTH, HelloApplication.HEIGHT);
-        stage.setScene(scene);
-    }
-}
